#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2019 Sebastian Gniazdowski

# Set the base and typically useful options
emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

[[ ${ZPLG_ICE[as]} != track* && ${ZPLG_ICE[.track]} != track* ]] && return 0
[[ $1 = plugin ]] && {
    print -P -- "${ZPLGM[col-pre]}as-track annex: ${ZPLGM[col-error]}ERROR: as'${ZPLG_ICE[as]}'" \
        "ice can be used only with snippets%f"
    return 0
}

local __type="$1" __url="$2" __id_as="$3" __dir="$4" __hook="$5"

ZPLG_ICE[.track]=${ZPLG_ICE[.track]:-${ZPLG_ICE[as]}}

if [[ ${ZPLG_ICE[as]} = track\|(command|program) ]] {
    ZPLG_ICE[as]=command
} elif [[ ${ZPLG_ICE[as]} = track\|completion ]] {
    ZPLG_ICE[as]=completion
} elif [[ ${ZPLG_ICE[as]} = track\|null ]] {
    ZPLG_ICE[as]=null
} else {
    unset 'ZPLG_ICE[as]'
}

if [[ -d $__dir && -z ${opts[(r)-u]} ]] {
    return 0
}

local -a match mbegin mend reply
local MATCH REPLY
integer MBEGIN MEND

(( ${+functions[-zplg-setup-plugin-dir]} )) || builtin source ${ZPLGM[BIN_DIR]}/zplugin-install.zsh

match=()
local dlpage=${__url%(#b)([^+])++*}
dlpage=$dlpage${match[1]}

if [[ -z ${ZPLG_ICE[dlink]} ]] {
    local plus=${(MS)__url%%[^+]++##} pattern_url=$dlpage
    plus=${plus#?+}
    while [[ -n $plus ]] {
        pattern_url=${pattern_url:h}
        plus=${plus%+}
    }
    local pattern_url=${pattern_url}/${__url##*++}
} else {
    local -a urls
    urls=( ${(s.;.)ZPLG_ICE[dlink]} )
    if (( ${#urls} == 2 )) {
        local pattern_url=${urls[@]:#0*} pattern_url0=${${(M)urls[@]:#0*}##0(:|=)(#c0,1)}
    } elif (( ${#urls} > 2 )) {
        print -P -- "${ZPLGM[col-pre]}as-track annex: ${ZPLGM[col-error]}ERROR:" \
            "${ZPLGM[col-msg2]}The ice ${ZPLGM[col-obj2]}dlink''${ZPLGM[col-msg2]}" \
            "has been used too many times (i.e.:" \
            "${ZPLGM[col-obj]}${#urls}${ZPLGM[col-msg2]}, while it can be used at most" \
            "two times, as ${ZPLGM[col-obj]}dlink0''${ZPLGM[col-msg2]}" \
            "and then ${ZPLGM[col-obj]}dlink''${ZPLGM[col-msg2]}), aborting.%f"
        return 9
    } else {
        local pattern_url=${ZPLG_ICE[dlink]}
    }
}

local tmpfile="$(mktemp)"

pattern_url=${pattern_url//\%VERSION\%/[.,a-zA-Z0-9_-]\\+}
local pattern_url0=${pattern_url0//\%VERSION\%/[.,a-zA-Z0-9_-]\\+}

local cur_paturl
for cur_paturl ( $pattern_url0 $pattern_url ) {
    -zplg-download-file-stdout $dlpage 1 >! $tmpfile || {
        -zplg-download-file-stdout $dlpage >! $tmpfile || {
            print -P "${ZPLGM[col-pre]}as-track annex: ${ZPLGM[col-error]}ERROR: couldn't" \
                "fetch the download page (${ZPLGM[col-obj]}${dlpage//\%/%%}${ZPLGM[col-error]})%f"
            return 9
        }
    }

    local -a list
    list=( ${(@f)"$(command grep -io "href=.$cur_paturl" $tmpfile)"} )

    local selected=${list[1]#href=?}

    if [[ -z $selected ]] {
        print -P -- "${ZPLGM[col-pre]}as-track annex: ${ZPLGM[col-error]}ERROR:%f" \
            "couldn't match the URL${${(M)cur_paturl:#$pattern_url0}:+-0} at the download page" \
            "(which is ${ZPLGM[col-obj]}${dlpage//\%/%%}%f"\
"${${__id_as:#$__url}:+\; the snippet is being identified as ${ZPLGM[col-obj2]}$__id_as%f})"
        return 9
    }

    if [[ $selected = /* ]] {
        local domain protocol
        if [[ $dlpage = (#b)(#i)((http(s|)|ftp(s|)|ssh|scp)://|)([^/]##)(*) ]] {
            protocol=${match[1]} domain=${match[5]}
        }
        if [[ -z $domain ]] {
            print -P -- "${ZPLGM[col-pre]}as-track annex: ${ZPLGM[col-error]}ERROR:" \
                "couldn't establish the domain name" \
                "(unsupported protocol? supported are: http(s),ftp(s),ssh,scp).%f"
            return 9
        }
        local new_url=${protocol:-http://}$domain$selected
    } elif [[ $selected = (#i)(http(s|)|ftp(s|)|ssh|scp)://* ]] {
        local new_url=$selected
    } else {
        local -a exts
        exts=(
            xhtml htmls html htm php php3 php4 phtml
            pl asp aspx ece js jsp jspx jhtml cfm py
            rb rhtml shtml cgi
        )
        if [[ $dlpage = *.(${(~j:|:)exts}) ]] {
            local new_url=${dlpage:h}/$selected
        } else {
            local new_url=$dlpage/$selected
        }
    }

    # Assign in case there's dlink0 given (i.e.: that this
    # URL was the dlink0 URL)
    dlpage=$new_url
}

# Assign outer-scope parameters
url=$new_url

return 0

# vim:ft=zsh:tw=80:sw=4:sts=4:et
