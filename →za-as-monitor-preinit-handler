#!/usr/bin/env zsh

â†’za-as-monitor-preinit-handler() {

# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2019 Sebastian Gniazdowski

# Set the base and typically useful options
builtin emulate -LR zsh
builtin setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

[[ ${ZINIT_ICE[as]} != (monitor*|*monitor) && ${ZINIT_ICE[.monitor]} != (monitor*|*monitor) ]] && return 0
[[ $1 = plugin ]] && {
    +zinit-message "[pre]as-monitor annex: [error]ERROR: as'${ZINIT_ICE[as]}'" \
        "ice can be used only with snippets[rst]"
    return 0
}

local __type="$1" __url="$2" __id_as="$3" __dir="$4" __hook="$5"

ZINIT_ICE[.monitor]=${ZINIT_ICE[.monitor]:-$ZINIT_ICE[as]}

if [[ ${ZINIT_ICE[as]} = ((monitor\||)(command|program)|(command|program)(\|monitor|)) ]] {
    ZINIT_ICE[as]=command
} elif [[ ${ZINIT_ICE[as]} = ((monitor\||)completion|completion(\|monitor|)) ]] {
    ZINIT_ICE[as]=completion
} elif [[ ${ZINIT_ICE[as]} = ((monitor\||)null|null(\|monitor|)) ]] {
    ZINIT_ICE[as]=null
    ZINIT_ICE[pick]=${ZINIT_ICE[pick]:-/dev/null}
} else {
    if [[ ${ZINIT_ICE[as]} != monitor ]] {
        +zinit-message "[pre]as-monitor annex: [msg2]" \
                "Warning: Unrecognized as'monitor' variant" \
                "([obj]${ZINIT_ICE[as]}[msg2])." \
                "Falling back to [obj]as'monitor'[msg2].[rst]%b"
    }
    unset 'ZINIT_ICE[as]'
}

if [[ -d $__dir && -z ${opts[(r)-u]} ]] {
    return 0
}

local -a match mbegin mend reply
local MATCH REPLY
integer MBEGIN MEND

(( $+functions[.zinit-setup-plugin-dir] )) || builtin source $ZINIT[BIN_DIR]/zinit-install.zsh

match=()
local dlpage=${__url%(#b)([^+])++*}
dlpage=$dlpage${match[1]}

if [[ $ZINIT_ICE[dl] == (*\;)(#c0,1)ink(0)(#c0,1)[=:](#c0,1)[-_/[:alnum:]]* ]] {
    ZINIT_ICE[dlink]=${(j.;.)${${(@M)${(@s.;.)ZINIT_ICE[dl]}:#ink([=:]|)*}##ink([=:]|)}}
    ZINIT_ICE[dl]=${(j.;.)${(@s.;.)ZINIT_ICE[dl]}:#ink([=:]|)*}
    [[ -z $ZINIT_ICE[dlink] ]] && unset 'ZINIT_ICE[dlink]'
    [[ -z $ZINIT_ICE[dl] ]] && unset 'ZINIT_ICE[dl]'
}

if [[ -z ${ZINIT_ICE[dlink]} ]] {
    local plus=${(MS)__url%%[^+]++##} pattern_url=$dlpage
    plus=${plus#?++}
    while [[ -n $plus ]] {
        pattern_url=${pattern_url:h}
        plus=${plus%+}
    }
    local pattern_url=${pattern_url}/${__url##*++}
} else {
    local -a urls
    urls=( ${(s.;.)ZINIT_ICE[dlink]} )
    if (( ${#urls} == 2 )) {
        local pattern_url=${urls[@]:#0*} pattern_url0=${${(M)urls[@]:#0*}##0(:|=)(#c0,1)}
    } elif (( ${#urls} > 2 )) {
        +zinit-message "[pre]as-monitor annex: [error]ERROR:" \
            "[msg2]The ice [obj2]dlink''[msg2]" \
            "has been used too many times (i.e.:" \
            "[obj]${#urls}[msg2], while it can be used at most" \
            "two times, as [obj]dlink0''[msg2]" \
            "and then [obj]dlink''[msg2]), aborting.[rst]"
        return 9
    } else {
        local pattern_url=${ZINIT_ICE[dlink]}
    }
}

local tmpfile="$(mktemp)"

pattern_url=${pattern_url//\%VERSION\%/[.,a-zA-Z0-9_-]+}
local pattern_url0=${pattern_url0//\%VERSION\%/[.,a-zA-Z0-9_-]+}

local cur_paturl
for cur_paturl ( $pattern_url0 $pattern_url ) {
    .zinit-download-file-stdout $dlpage >! $tmpfile || {
        .zinit-download-file-stdout $dlpage 1 >! $tmpfile || {
            +zinit-message "[pre]as-monitor annex: [error]ERROR: couldn't" \
                "fetch the download page ([obj]${dlpage//\%/%%}[error])[rst]"
            return 9
        }
    }

    local -a list
    list=( ${(@f)"$(noglob command egrep -io "href=.?$cur_paturl" $tmpfile)"} )

    local selected=${list[1]#href=}
    selected=${selected#[\"\']}

    if [[ -z $selected ]] {
        +zinit-message "[pre]as-monitor annex: [error]ERROR:[rst]" \
            "couldn't match the URL${${(M)cur_paturl:#$pattern_url0}:+-0} at the download page" \
            "(which is [obj]${dlpage//\%/%%}[rst]"\
"${${__id_as:#$__url}:+\; the snippet is being identified as" \
"[obj2]$__id_as[rst]%b}; was matching" \
            "[obj2]$cur_paturl[rst]%b)."
        return 9
    }

    if [[ $selected = /* ]] {
        local domain protocol
        if [[ $dlpage = (#b)(#i)((http(s|)|ftp(s|)|ssh|scp)://|)([^/]##)(*) ]] {
            protocol=${match[1]} domain=${match[5]}
        }
        if [[ -z $domain ]] {
            +zinit-message "[pre]as-monitor annex: [error]ERROR:" \
                "couldn't establish the domain name" \
                "(unsupported protocol? supported are: http(s),ftp(s),ssh,scp).[rst]"
            return 9
        }
        local new_url=${protocol:-http://}$domain$selected
    } elif [[ $selected = (#i)(http(s|)|ftp(s|)|ssh|scp)://* ]] {
        local new_url=$selected
    } else {
        local -a exts
        exts=(
            xhtml htmls html htm php php3 php4 phtml
            pl asp aspx ece js jsp jspx jhtml cfm py
            rb rhtml shtml cgi
        )
        if [[ $dlpage = *.(${(~j:|:)exts}) ]] {
            local new_url=${dlpage:h}/$selected
        } else {
            local new_url=$dlpage/$selected
        }
    }

    # Assign in case there's dlink0 given (i.e.: that this
    # URL was the dlink0 URL)
    dlpage=$new_url
}

# Handle the update
if [[ -n ${opts[(r)-u]} && -z ${opts[(r)-f]} ]] {
    { local old_url="$(<$__dir/._zinit/url_rsvd)"; } 2>/dev/null
    [[ $old_url == $new_url ]] && return 8
}

# Assign outer-scope parameters
url=$new_url
ZINIT_ICE[url_rsvd]=$new_url
typeset -gA ICE_OPTS
ICE_OPTS[opt_-q,--quiet]=0
ZINIT[annex-multi-flag:pull-active]=2

+zinit-message "[pre]as-monitor annex: [msg1]Matched the" \
    "following URL: [obj]${new_url}[rst]"

return 0

}

# vim:ft=zsh:tw=80:sw=4:sts=4:et
